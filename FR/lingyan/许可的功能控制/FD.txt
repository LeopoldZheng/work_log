
架构图：
https://www.processon.com/v/68d62f74a225f06bfca6baf9

============ app: 许可的功能定义 ===============
1. app打包：
# lingyan.meta.yml
license_function:
  - license_id: xxx
    # 与agent无关的功能，可以在ai-gateway统一校验
	common_type:
	  urls:
	    - url: /chat
		  configuration:
	    - url: /knowledge/*
		  configuration:
	# 与agent相关的功能；ai-gateway拿不到plan请求的动态规划出的agent_id，只能在app那边触发校验
    agent_type:
	  - agent_id: xxx
	    urls:
	      - url: xxx
		    configuration: # 描述同一功能、不同许可下的资源配置。如试用许可的数据分类分级字段总数限量不同
	      - url: xxx
		    configuration:
    description: 进阶包license

============ ai-gateway: 许可的配置存储与更新 ===============
# application.yml
app_license:
  # 预置的license
  preload_license:
    - license_id: 试用版
      type: DAYS
      value: 30
      description:
    - license_id: 基础版
      type: DATE
      value: 2100-12-31 （NULL就是永久）
      description: yyy
  # 其他license，用于校验时用
  advanced_license:
    - license_id: 进阶包license_id1
      description:
    - license_id: 进阶包license_id2
      description:

2. ai-gateway部署与升级（服务首次启动加载预置许可并入库）：
  - 获取业务锁（gmd提供的分布式锁）
  - 加载application.yml配置
  - 根据 租户id=0, license_id=预置license_id 查表 t_app_license_tenant
    - 查不到，则入库 t_app_license_tenant VALUES(租户id=0, 预置license_id, expired_time, expired_time_type, order_time)
    - 查的到，只更新字段 expired_time, expired_time_type

3. app安装场景：
- manage-center推送appid, metadata
- 获取业务锁
- 许可功能定义入库 t_app_license_function VALUES(appid, metadata)
- 加载预置许可的功能：
  - 查表 t_app_license_tenant 获取 expired_time
  - 入redis:
    - app_license:{租户id=0}:common_type:{预置license_id}:{appid}:{url}        值：  {expired_time} + {configuration}
    - app_license:{租户id=0}:agent_type: {预置license_id}:{appid}:{agent_id}   值：  {expired_time} + {configuration}

4. 云端用户购买进阶包场景：
- 云景推送数据：租户id, license_id, expired_time, expired_time_type, order_time
- 获取业务锁
- 入库 t_app_license_tenant VALUES(租户id, license_id, expired_time, expired_time_type, order_time)
- 入redis:
  - app_license:{租户id}:common_type:{进阶license_id}:{appid}:{url}         值：  {expired_time} + {configuration}
  - app_license:{租户id}:agent_type: {进阶license_id}:{appid}:{agent_id}    值：  {expired_time} + {configuration}

============ ai-gateway: 许可的功能控制 ===============
5. 用户请求场景：
    加载application.yml的app_license配置
    ai-gateway 做 common_check:
      - 要求请求带上租户id、appid
      - 先找预置license的redis key，若找到，校验过期时间和configuration
      - 再找进阶license的redis key，若找到，校验过期时间和configuration
      - 找不到，拒绝请求
    app 触发 agent_check：
      - 要求请求带上租户id、agent_id
      - 先找预置license的redis key，若找到，校验过期时间和configuration
      - 再找进阶license的redis key，若找到，校验过期时间和configuration
      - 找不到，拒绝请求


=========== 其他业务场景 ==================================

6. 租户合并场景：
  - 获取业务锁
  - 主租户：
    - 查询副租户剩余时间，把剩余时间累加到主租户上，更新mysql和redis
  - 删除副租户：
    - t_app_license_tenant 根据租户id删除数据
    - redis 删除key: app_license:{租户id}*

7. ai-gateway服务重启场景：
  - 获取业务锁
  - 重建redis的2类key的数据：把 t_app_license_tenant、t_app_license_function 数据捞到redis里

8. 每日定时任务：删除过期数据：
  - 获取业务锁
  - 查询 t_app_license_tenant 的过期时间和下单时间，删除mysql和redis的过期数据

9. 查询有功能权限的应用和智能体（许可展示、plan图获取可用的agent列表）
  - 请求带上{租户id}（为0则表示本地灵岩用户）
  - 调用ai-gateway接口getAvaliableAppAgent
    ai-gateway提供一个查询可用app及agent的接口getAvaliableAppAgent，参数是租户id
    - 先查安装了哪些license
      根据租户id={0, 租户id参数} 查表 t_app_license_tenant 获取 license_id 和过期时间
    - 根据license查app的metadata
      根据 license_id 查表 t_app_license_function，获取可用的app及agent



